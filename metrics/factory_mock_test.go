// Code generated by MockGen. DO NOT EDIT.
// Source: factory.go

// Package metrics is a generated GoMock package.
package metrics

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIFactory is a mock of IFactory interface.
type MockIFactory struct {
	ctrl     *gomock.Controller
	recorder *MockIFactoryMockRecorder
}

// MockIFactoryMockRecorder is the mock recorder for MockIFactory.
type MockIFactoryMockRecorder struct {
	mock *MockIFactory
}

// NewMockIFactory creates a new mock instance.
func NewMockIFactory(ctrl *gomock.Controller) *MockIFactory {
	mock := &MockIFactory{ctrl: ctrl}
	mock.recorder = &MockIFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIFactory) EXPECT() *MockIFactoryMockRecorder {
	return m.recorder
}

// Counter mocks base method.
func (m *MockIFactory) Counter(key string) (*Counter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Counter", key)
	ret0, _ := ret[0].(*Counter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Counter indicates an expected call of Counter.
func (mr *MockIFactoryMockRecorder) Counter(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Counter", reflect.TypeOf((*MockIFactory)(nil).Counter), key)
}

// Gauge mocks base method.
func (m *MockIFactory) Gauge(key string) (*Gauge, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Gauge", key)
	ret0, _ := ret[0].(*Gauge)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Gauge indicates an expected call of Gauge.
func (mr *MockIFactoryMockRecorder) Gauge(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Gauge", reflect.TypeOf((*MockIFactory)(nil).Gauge), key)
}

// OnProcessStart mocks base method.
func (m *MockIFactory) OnProcessStart() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OnProcessStart")
}

// OnProcessStart indicates an expected call of OnProcessStart.
func (mr *MockIFactoryMockRecorder) OnProcessStart() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnProcessStart", reflect.TypeOf((*MockIFactory)(nil).OnProcessStart))
}

// OnProcessTermination mocks base method.
func (m *MockIFactory) OnProcessTermination() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OnProcessTermination")
}

// OnProcessTermination indicates an expected call of OnProcessTermination.
func (mr *MockIFactoryMockRecorder) OnProcessTermination() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnProcessTermination", reflect.TypeOf((*MockIFactory)(nil).OnProcessTermination))
}

// OnStartGameSession mocks base method.
func (m *MockIFactory) OnStartGameSession(sessionId string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OnStartGameSession", sessionId)
}

// OnStartGameSession indicates an expected call of OnStartGameSession.
func (mr *MockIFactoryMockRecorder) OnStartGameSession(sessionId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnStartGameSession", reflect.TypeOf((*MockIFactory)(nil).OnStartGameSession), sessionId)
}

// Timer mocks base method.
func (m *MockIFactory) Timer(key string) (*Timer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Timer", key)
	ret0, _ := ret[0].(*Timer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Timer indicates an expected call of Timer.
func (mr *MockIFactoryMockRecorder) Timer(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Timer", reflect.TypeOf((*MockIFactory)(nil).Timer), key)
}
