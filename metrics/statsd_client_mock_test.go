// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/amazon-gamelift/amazon-gamelift-servers-go-server-sdk/v5/metrics (interfaces: StatsDClient)

// Package metrics is a generated GoMock package.
package metrics

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockStatsDClient is a mock of StatsDClient interface.
type MockStatsDClient struct {
	ctrl     *gomock.Controller
	recorder *MockStatsDClientMockRecorder
}

// MockStatsDClientMockRecorder is the mock recorder for MockStatsDClient.
type MockStatsDClientMockRecorder struct {
	mock *MockStatsDClient
}

// NewMockStatsDClient creates a new mock instance.
func NewMockStatsDClient(ctrl *gomock.Controller) *MockStatsDClient {
	mock := &MockStatsDClient{ctrl: ctrl}
	mock.recorder = &MockStatsDClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStatsDClient) EXPECT() *MockStatsDClientMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockStatsDClient) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockStatsDClientMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockStatsDClient)(nil).Close))
}

// Count mocks base method.
func (m *MockStatsDClient) Count(arg0 string, arg1 int64, arg2 []string, arg3 float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// Count indicates an expected call of Count.
func (mr *MockStatsDClientMockRecorder) Count(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockStatsDClient)(nil).Count), arg0, arg1, arg2, arg3)
}

// Gauge mocks base method.
func (m *MockStatsDClient) Gauge(arg0 string, arg1 float64, arg2 []string, arg3 float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Gauge", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// Gauge indicates an expected call of Gauge.
func (mr *MockStatsDClientMockRecorder) Gauge(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Gauge", reflect.TypeOf((*MockStatsDClient)(nil).Gauge), arg0, arg1, arg2, arg3)
}

// TimeInMilliseconds mocks base method.
func (m *MockStatsDClient) TimeInMilliseconds(arg0 string, arg1 float64, arg2 []string, arg3 float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TimeInMilliseconds", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// TimeInMilliseconds indicates an expected call of TimeInMilliseconds.
func (mr *MockStatsDClientMockRecorder) TimeInMilliseconds(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TimeInMilliseconds", reflect.TypeOf((*MockStatsDClient)(nil).TimeInMilliseconds), arg0, arg1, arg2, arg3)
}
