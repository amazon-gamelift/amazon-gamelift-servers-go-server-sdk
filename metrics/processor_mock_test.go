// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/amazon-gamelift/amazon-gamelift-servers-go-server-sdk/v5/metrics (interfaces: MetricsProcessor)

// Package metrics is a generated GoMock package.
package metrics

import (
	context "context"
	reflect "reflect"

	model "github.com/amazon-gamelift/amazon-gamelift-servers-go-server-sdk/v5/metrics/model"
	log "github.com/amazon-gamelift/amazon-gamelift-servers-go-server-sdk/v5/server/log"
	gomock "github.com/golang/mock/gomock"
)

// MockMetricsProcessor is a mock of MetricsProcessor interface.
type MockMetricsProcessor struct {
	ctrl     *gomock.Controller
	recorder *MockMetricsProcessorMockRecorder
}

// MockMetricsProcessorMockRecorder is the mock recorder for MockMetricsProcessor.
type MockMetricsProcessorMockRecorder struct {
	mock *MockMetricsProcessor
}

// NewMockMetricsProcessor creates a new mock instance.
func NewMockMetricsProcessor(ctrl *gomock.Controller) *MockMetricsProcessor {
	mock := &MockMetricsProcessor{ctrl: ctrl}
	mock.recorder = &MockMetricsProcessorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMetricsProcessor) EXPECT() *MockMetricsProcessorMockRecorder {
	return m.recorder
}

// GetGlobalTags mocks base method.
func (m *MockMetricsProcessor) GetGlobalTags() map[string]string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGlobalTags")
	ret0, _ := ret[0].(map[string]string)
	return ret0
}

// GetGlobalTags indicates an expected call of GetGlobalTags.
func (mr *MockMetricsProcessorMockRecorder) GetGlobalTags() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGlobalTags", reflect.TypeOf((*MockMetricsProcessor)(nil).GetGlobalTags))
}

// GetMetric mocks base method.
func (m *MockMetricsProcessor) GetMetric(arg0 string) (model.Metric, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMetric", arg0)
	ret0, _ := ret[0].(model.Metric)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetMetric indicates an expected call of GetMetric.
func (mr *MockMetricsProcessorMockRecorder) GetMetric(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMetric", reflect.TypeOf((*MockMetricsProcessor)(nil).GetMetric), arg0)
}

// ListMetrics mocks base method.
func (m *MockMetricsProcessor) ListMetrics() []model.Metric {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMetrics")
	ret0, _ := ret[0].([]model.Metric)
	return ret0
}

// ListMetrics indicates an expected call of ListMetrics.
func (mr *MockMetricsProcessorMockRecorder) ListMetrics() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMetrics", reflect.TypeOf((*MockMetricsProcessor)(nil).ListMetrics))
}

// OnGameSessionStarted mocks base method.
func (m *MockMetricsProcessor) OnGameSessionStarted(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OnGameSessionStarted", arg0)
}

// OnGameSessionStarted indicates an expected call of OnGameSessionStarted.
func (mr *MockMetricsProcessorMockRecorder) OnGameSessionStarted(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnGameSessionStarted", reflect.TypeOf((*MockMetricsProcessor)(nil).OnGameSessionStarted), arg0)
}

// RemoveGlobalTag mocks base method.
func (m *MockMetricsProcessor) RemoveGlobalTag(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RemoveGlobalTag", arg0)
}

// RemoveGlobalTag indicates an expected call of RemoveGlobalTag.
func (mr *MockMetricsProcessorMockRecorder) RemoveGlobalTag(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveGlobalTag", reflect.TypeOf((*MockMetricsProcessor)(nil).RemoveGlobalTag), arg0)
}

// SetGlobalTag mocks base method.
func (m *MockMetricsProcessor) SetGlobalTag(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetGlobalTag", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetGlobalTag indicates an expected call of SetGlobalTag.
func (mr *MockMetricsProcessorMockRecorder) SetGlobalTag(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetGlobalTag", reflect.TypeOf((*MockMetricsProcessor)(nil).SetGlobalTag), arg0, arg1)
}

// Start mocks base method.
func (m *MockMetricsProcessor) Start(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockMetricsProcessorMockRecorder) Start(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockMetricsProcessor)(nil).Start), arg0)
}

// Stop mocks base method.
func (m *MockMetricsProcessor) Stop() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop")
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop.
func (mr *MockMetricsProcessorMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockMetricsProcessor)(nil).Stop))
}

// UnregisterMetric mocks base method.
func (m *MockMetricsProcessor) UnregisterMetric(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UnregisterMetric", arg0)
}

// UnregisterMetric indicates an expected call of UnregisterMetric.
func (mr *MockMetricsProcessorMockRecorder) UnregisterMetric(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnregisterMetric", reflect.TypeOf((*MockMetricsProcessor)(nil).UnregisterMetric), arg0)
}

// dimensionalMetricsEnabled mocks base method.
func (m *MockMetricsProcessor) dimensionalMetricsEnabled() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "dimensionalMetricsEnabled")
	ret0, _ := ret[0].(bool)
	return ret0
}

// dimensionalMetricsEnabled indicates an expected call of dimensionalMetricsEnabled.
func (mr *MockMetricsProcessorMockRecorder) dimensionalMetricsEnabled() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "dimensionalMetricsEnabled", reflect.TypeOf((*MockMetricsProcessor)(nil).dimensionalMetricsEnabled))
}

// enqueueMetric mocks base method.
func (m *MockMetricsProcessor) enqueueMetric(arg0 model.MetricMessage) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "enqueueMetric", arg0)
}

// enqueueMetric indicates an expected call of enqueueMetric.
func (mr *MockMetricsProcessorMockRecorder) enqueueMetric(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "enqueueMetric", reflect.TypeOf((*MockMetricsProcessor)(nil).enqueueMetric), arg0)
}

// getLogger mocks base method.
func (m *MockMetricsProcessor) getLogger() log.ILogger {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getLogger")
	ret0, _ := ret[0].(log.ILogger)
	return ret0
}

// getLogger indicates an expected call of getLogger.
func (mr *MockMetricsProcessorMockRecorder) getLogger() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getLogger", reflect.TypeOf((*MockMetricsProcessor)(nil).getLogger))
}

// registerMetric mocks base method.
func (m *MockMetricsProcessor) registerMetric(arg0 model.Metric) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "registerMetric", arg0)
}

// registerMetric indicates an expected call of registerMetric.
func (mr *MockMetricsProcessorMockRecorder) registerMetric(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "registerMetric", reflect.TypeOf((*MockMetricsProcessor)(nil).registerMetric), arg0)
}
